#! /usr/bin/env node
if (process.argv.length !== 3){
  console.log("boilerplate takes in 1 argument (file name)");
  return;
}

const fs = require("fs");
const readline = require("readline");
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
})

/************************/
/*       Prompts        */
/************************/
const htmlFileName = (process.argv[2].slice(-5) === ".html")
  ? process.argv[2]
  : process.argv[2] + ".html";

const dataForHTML = [htmlFileName];
const steps = [
  {
    type: "html",
    prompt: "Enter page title (press enter to skip):"
  },
  {
    type: "css",
    prompt: "Enter path to CSS file (press enter to skip):",
    content: "/* Generated by boilerplate */\n",
    ext: ".css"
  },
  {
    type: "js",
    prompt: "Enter path to JS file (press enter to skip):",
    content: "// Generated by boilerplate\n",
    ext: ".js"
  }
];

// IIFE so we can use `async`
(async function(s) {
  for (let i = 0; i < s.length; i++) {
    const response = await promiseQuestion(s[i].prompt);
    const verifiedPath = (i !== 0)
      ? await promiseCheckFile(response, s[i].content, s[i].ext)
      : null

    dataForHTML.push(verifiedPath || response);

    if (i === s.length - 1) {
      rl.close();
      createHTML(dataForHTML);
    }
  }
})(steps);

/************************/
/* Function definitions */
/************************/
function promiseCheckFile(path, content, ext) {
  // Append extension if not there
  if (path.slice(-ext.length) !== ext) {
    path += ext;
  }

  // Try to open file; create dir and file if it doesn't exist (on error)
  return new Promise((resolve, reject) => {
    fs.open(path, "r", (err, fd) => {
      if (err) {
        const dir = (path.includes("/"))
          ? path.split("/").slice(0, -1).join("/")
          : ".";

        fs.mkdir(dir, { recursive: true }, err => {
          if (err) reject(err);
          fs.writeFile(path, content, err => {
            if (err) reject(err);
          })
        })
      } else {
        fs.close(fd, err => {
          if (err) reject(err);
        })
      }
    })
    resolve(path)
  })
}

function promiseQuestion(question) {
  return new Promise((resolve, reject) => {
    rl.question(question + "\n", answer => {
      resolve(answer);
    })
  })
}

function createHTML(contentData) {
  const [htmlFile, title, css, js] = contentData;
  const htmlString =
`<!DOCTYPE html>
<!-- Generated by boilerplate -->
<html>
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" type="text/css" href="${css}" />
    <title>${title}</title>
  </head>

  <body>
    <script type="application/javascript" src="${js}"></script>
  </body>
</html>
`

  fs.writeFile(htmlFile, htmlString, err => {
    if (err) throw err;
    console.log(`Boilerplate ${htmlFile} written.`);
  })
}
