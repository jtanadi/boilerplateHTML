#! /usr/bin/env node
if (process.argv.length !== 3){
  console.log("boilerplate takes in 1 argument (file name)");
  return;
}

const readline = require("readline");
const fs = require("fs");

let htmlFileName = process.argv[2];
if (htmlFileName.slice(-5) !== ".html") {
  htmlFileName += ".html";
}

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
})

/************************/
/*       Prompts        */
/************************/
<<<<<<< HEAD
=======
const prompts = ["Enter page title (press enter to skip):",
                 "Enter path to CSS file (press enter to skip):",
                 "Enter path to JS file (press enter to skip):"];
>>>>>>> ce18fddeb643c6eef360a55f0e281d4eb51a41ae
let pageTitle, cssFilePath, jsFilePath;
const prompts = [
  "Enter page title (press enter to skip):",
  "Enter path to CSS file (press enter to skip):",
  "Enter path to JS file (press enter to skip):"
];
promiseQuestion(prompts[0])
  .then(data => {
    pageTitle = data;
    return promiseQuestion(prompts[1]);
  })
  .then(data => {
    cssFilePath = data;
    return promiseQuestion(prompts[2]);
  })
  .then(data => {
    jsFilePath = data;
    rl.close();

    createHTML(htmlFileName, pageTitle, cssFilePath, jsFilePath);
  })

/************************/
/* Function definitions */
/************************/
function promiseQuestion(question) {
  return new Promise((resolve, reject) => {
    rl.question(question + "\n", answer => {
      resolve(answer);
    })
  })
}

function createHTML(htmlFile, title, css, js) {
  const htmlString =
`<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" type="text/css" href="${css}" />
    <title>${title}</title>
  </head>

  <body>
    <script type="application/javascript" src="${js}"></script>
  </body>
</html>
`

  fs.writeFile(htmlFile, htmlString, err => {
    if (err) throw err;
    console.log(`Boilerplate ${htmlFile} written.`);
  })
}
